<?php
namespace Clio\Adapter\SymfonyBundles\ComponentBundle\DependencyInjection\Compiler;

use Symfony\Component\DependencyInjection\ContainerBuilder,
	Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface,
	Symfony\Component\DependencyInjection\Definition,
	Symfony\Component\DependencyInjection\Reference;

class ProxyCompilerPass implements CompilerPassInterface 
{
	public function process(ContainerBuilder $container)
	{
		foreach($container->findTaggedServiceIds('clio_component.proxy') as $id => $tags) {
			$params = array_shift($tags);

			// once delete the definition
			$definition = $container->getDefinition($id);

            //'Clio\Adapter\SymfonyBundles\ComponentBundle\Proxy\ServiceProxy';
            $proxyClass = isset($params['proxy_class']) ? $params['proxy_class'] : null;

            if(!$proxyClass) {
                // fixme: proxyClass should be autogenerated class name 
                //$proxyClass = ClassInflector::getProxyNamespace() . $definition->getClass();
                $proxyClass = 'Clio\Adapter\SymfonyBundles\ComponentBundle\Proxy\ServiceProxy';
            }
            
            $proxyDefinition = new Definition(
                    'Clio\Adapter\SymfonyBundles\ComponentBundle\Proxy\ServiceProxy', 
                    array(
                        $proxyClass, 
                        array(new Reference('service_container'), $id)
                    )
                );
            $proxyDefinition->setFactoryService('clio_component.class_factory');
            $proxyDefinition->setFactoryMethod('createClass');

            $container->setDefinition($id . '.proxy', $proxyDefinition);
		}
	}
}

